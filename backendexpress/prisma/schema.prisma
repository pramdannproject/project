// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid()) // Using UUID for a standard GUID
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact?

  notification notification[]
  sessions     Session[]
}

model Contact {
  id        String   @id @default(uuid()) // Assuming UUID for a unique identifier
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  noReg     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  picture   String   @default("/default.png")
  account   Account  @relation(fields: [id], references: [id])
}

model Session {
  id             String     @id @default(uuid())
  token          String     @unique
  accountId      String
  expiredAt      DateTime
  device         DeviceList @default(MOBILE)
  ip             String
  region         String
  city           String
  loc            String
  org            String
  timezone       String
  account        Account    @relation(fields: [accountId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastAccessedAt DateTime   @default(now())
}

model notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      TypeNotification @default(BASIC)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  accountId String
  account   Account          @relation(fields: [accountId], references: [id])
}

model FileNode {
  id        String     @id @default(uuid()) // ID file atau folder
  name      String // Nama file atau folder
  type      FileType // Tipe, apakah ini file atau folder
  path      String // Path lengkap file atau folder
  parentId  String? // ID parent untuk membentuk hierarki
  parent    FileNode?  @relation("ParentChild", fields: [parentId], references: [id])
  children  FileNode[] @relation("ParentChild")
  createdAt DateTime   @default(now()) // Tanggal file/folder dibuat
  updatedAt DateTime   @updatedAt // Tanggal file/folder terakhir diperbarui
}

model FileNodeSga {
  id        String        @id @default(uuid()) // ID file atau folder
  name      String // Nama file atau folder
  type      FileType // Tipe, apakah ini file atau folder
  path      String // Path lengkap file atau folder
  parentId  String? // ID parent untuk membentuk hierarki
  parent    FileNodeSga?  @relation("ParentChild", fields: [parentId], references: [id])
  children  FileNodeSga[] @relation("ParentChild")
  createdAt DateTime      @default(now()) // Tanggal file/folder dibuat
  updatedAt DateTime      @updatedAt // Tanggal file/folder terakhir diperbarui
}

model FileNodeGLManagementBoard {
  id        String                      @id @default(uuid()) // ID file atau folder
  name      String // Nama file atau folder
  type      FileType // Tipe, apakah ini file atau folder
  path      String // Path lengkap file atau folder
  pathThumb String? // Path thumbnail file
  parentId  String? // ID parent untuk membentuk hierarki
  parent    FileNodeGLManagementBoard?  @relation("ParentChild", fields: [parentId], references: [id])
  children  FileNodeGLManagementBoard[] @relation("ParentChild")
  createdAt DateTime                    @default(now()) // Tanggal file/folder dibuat
  updatedAt DateTime                    @updatedAt // Tanggal file/folder terakhir diperbarui
}

model FileNodeGentaniBoard {
  id        String                 @id @default(uuid()) // ID file atau folder
  name      String // Nama file atau folder
  type      FileType // Tipe, apakah ini file atau folder
  path      String // Path lengkap file atau folder
  parentId  String? // ID parent untuk membentuk hierarki
  parent    FileNodeGentaniBoard?  @relation("ParentChild", fields: [parentId], references: [id])
  children  FileNodeGentaniBoard[] @relation("ParentChild")
  createdAt DateTime               @default(now()) // Tanggal file/folder dibuat
  updatedAt DateTime               @updatedAt // Tanggal file/folder terakhir diperbarui
}

model manPowerImage {
  id         String   @id @default(uuid())
  name       String
  noreg      String
  shift      ShitType @default(WHITE)
  path       String   @default("/default.png")
  editedPath String   @default("/default.png")
  x          Float    @default(0)
  y          Float    @default(0)
  xPercent   Float    @default(0)
  yPercent   Float    @default(0)
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model historyManPowerImage {
  id         String   @id @default(uuid())
  name       String
  noreg      String
  shift      ShitType @default(WHITE)
  path       String   @default("/default.png")
  editedPath String   @default("/default.png")
  x          Float    @default(0)
  y          Float    @default(0)
  xPercent   Float    @default(0)
  yPercent   Float    @default(0)
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model defectOperatorParrent {
  id        String                @id @default(uuid())
  name      String
  children  defectOperatorChild[] @relation("ParentChild")
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model defectOperatorChild {
  id         String                 @id @default(uuid())
  no         String
  line       String
  process    String
  defect     String
  parentId   String?
  parent     defectOperatorParrent? @relation("ParentChild", fields: [parentId], references: [id])
  operatorId String? // Foreign key untuk operator
  operator   operator?              @relation(fields: [operatorId], references: [id]) // Relasi ke model operator
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

model operator {
  id        String   @id @default(uuid())
  noReg     String   @unique
  name      String
  line      String
  process   String
  defect    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  defectOperatorChilds defectOperatorChild[] // Relasi satu ke banyak dari operator ke defectOperatorChild
}

enum FileType {
  FILE
  FOLDER
}

enum Role {
  USER
  ADMIN
}

enum DeviceList {
  MOBILE
  TABLET
  DESKTOP
  UNKNOWN
}

enum TypeNotification {
  BASIC
  INFO
  WARNING
  ERROR
}

enum ShitType {
  WHITE
  RED
}
